// This file is automatically generated. DO NOT EDIT MANUALLY

package rps
import cats.implicits._
import cats.effect._
import org.http4s._
import org.http4s.dsl.Http4sDsl
import io.circe.Decoder
import io.circe.JsonObject
import io.buildo.enumero.circe._
import org.http4s.circe.CirceEntityDecoder._
import org.http4s.circe.CirceEntityEncoder._

class GameRoutes[F[_]: Sync](controller: GameController[F]) extends Http4sDsl[F] {
  private def extractFromBody[A: Decoder](json: JsonObject, name: String): Option[A] =
    json(name).flatMap(_.as[A].toOption)

  val routes: HttpRoutes[F] = HttpRoutes.of[F]({
    case GET -> Root / "list" =>
      for {
        result <- controller.list()
        res <- Ok(result)
      } yield res
    case req @ POST -> Root / "play" =>
      for {
        jsonBody <- req.as[JsonObject]
        result <- (for {
          userMove <- extractFromBody[Move](jsonBody, "userMove")
          result <- extractFromBody[Result](jsonBody, "result")
        } yield controller.play(userMove, result)).map(Ok(_)).getOrElse(BadRequest())
      } yield result
  })
}
